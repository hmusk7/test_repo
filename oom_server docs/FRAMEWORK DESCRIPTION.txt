express
HTTP 서버에 들어오는 요청을 처리해주는 핸들러.
const app = express(); 와 같이 익스프레스 객체를 초기화
app.use(express.json()); 하면 express.json() 미들웨어를 통해 JSON 형식의 요청 본문이 알아서 파싱됨


http
웹소켓 통신을 할땐 초기에 클라이언트가 서버에 HTTP 연결 요청을 보내고(핸드셰이크)
이를 통해 둘이 연결되면 이후 소켓을 통해 통신함.
따라서 http 는 핸드셰이크 한 번을 위해 필요한 라이브러리
const server = createServer(); 는 새로운 HTTP 서버 객체를 생성하며,
const server = createServer(app); 와 같이 익스프레스 객체를 인자로 넘겨주면
익스프레스가 라우터와 미들웨어로 설정되어 HTTP 객체로 넘겨받은 요청을 처리해주는 역할을 함.

socket.io
서버를 위한 소켓 라이브러리
const io = new Server(server); 와 같이 서버(HTTP 서버 객체)를 넘겨줘서 소켓 객체를 초기화
특정한 URL 을 지정하지 않으면 소켓은 기본적으로 host(that serves the page) 를 기본값으로 연결 시도
만약 웹사이트의 루트 폴더에서 앱을 호스팅하지 않으면(e.g., https://example.com/chatapp),
서버와 클라이언트에 모두 path 를 제대로 명시해줘야함.

cors
클라이언트가 서버로 요청을 보내기 이전에, 사전 요청을 보냄.
사전 요청은 CORS Preflight Reqeust 라고 하며, OPTIONS 메서드로 사전 요청을 보내고,
이 요청은 서버가 특정 HTTP 메서드(POST, UPDATE 등)를 허용하는지 확인함
이 요청에 적절히 응답해야 클라이언트가 실제 요청을 보내기 때문에,
CORS 미들웨어를 추가하여 반드시 이 요청을 처리해줘야함.
app.use(cors()); 이렇게 사용하면 CORS의 어떤 Header, 어떤 Method, 어떤 Origin 에 대해서도 접근을 허용
app.options('*', cors()); 은 모든 경로에 대하여 모든 접근 허용 옵션을 적용함


bcryptjs
비밀번호를 안전하게 해시하고 검증하는 기능을 제공하는 라이브러리

node-cron
크론 작업은 유닉스 계열 운영체제에서 일정한 시간 간격으로 명령어나 스크립트를 실행하도록 설정하는 작업.
node-cron 은 Node.js 환경에서 정기적인 크론 작업 스케줄링을 쉽게 설정할 수 있는 라이브러리
매일 12시에 매칭되지 않은 유저들을 매칭시켜주는 작업을 시행하기 위해 사용

express.Router()
express 의 app.use()는 미들웨어 함수를 애플리케이션에 추가하는 express 함수.
이 함수는 특정 경로에 대해 미들웨어를 설정할 수 있음.
app.use('path', router); 의 경우 'path' 로 요청이 들어왔을 때, 요청을 어떤 미들웨어로 처리할지 설정
router 는 index.js 에서 임포트된 signin.js, signup.js, main.js 와 같은 파일이며,
각 파일에서는 module.exports = router; 와 같이 해당 파일에서 사용된 라우터 객체를 다른 파일에서 사용할 수 있도록 내보냄.
(module.exports 는 Node.js 의 모듈 시스템에서 특정 객체나 값을 모듈 외부로 노출시키기 위해 사용)
이때 라우터 객체는, 각 파일에서 express.Router() 를 통해 생성된 라우터 객체로,
이 객체는 미들웨어와 라우트를 모듈러하고 마운트할 수 있는 미니 애플리케이션을 생성
쉽게 말하자면, 라우터 객체가 생성된 파일에서 router.post 와 같이 요청을 처리하도록 하고,
그 객체를 index.js 에 넘겨줌으로써 요청이 들어왔을 때 객체에 저장된 처리 함수를 통해 처리하도록 하는 것.