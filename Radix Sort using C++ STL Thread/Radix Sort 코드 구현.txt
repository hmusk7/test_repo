1. 동적으로 선언된 배열에 대하여
int* arr = new int[size]
for (int i = 0; i < size; i++)
	arr[i] = rand();

2. 스레드들이 전부 ThreadManager() 라는 함수에 들어가서 RadixTaskQueue 의 상태를 wait 하면서 Queue 에 Task 가 들어오면 전부 접근을 시도하고 선택된 스레드 하나가 Task 를 처리한다.

3. ThreadManager() 클래스는 스레드와 스레드의 index 를 멤버 변수로 저장한다. 스레드 생성과 소멸 함수도 포함한다.

4. RadixTaskQueue 는 모든 정렬이 끝나면 isSortEnd = true 로 바꾸고, 스레드들이 전부 종료할 수 있도록 한다.

5. RadixSort() 는 메인 스레드에서 실행되며, 하나씩 절차들을 TaskQueue 에 넣어준다.

6. RadixSort() 의 Task 들은 다음과 같다.
1. 먼저 for문을 통해 최대 자릿수를 확인한다.
2. 최대 자릿수의 크기만큼 버켓팅을 실시해야한다. for문을 통해 첫째 자리부터 마지막 자리까지 순회하여 버켓팅의 실행 횟수를 설정한다.
3. for문을 통해 arr 의 요소들의 각 digit을 카운트하여 vector<int*> buckets 의 객체를 카운트의 크기만큼 동적으로 할당한다.
4. buckets 의 개수만큼 스레드를 할당하여 각각 버켓 카운팅을 실시한다.