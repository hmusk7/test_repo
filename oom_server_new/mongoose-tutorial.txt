/* save() 메서드 사용 시 인스턴스를 생성하고, save() 를 호출하여 데이터베이스에 새로운 데이터를 쓸 수 있음.
const student1 = new User({
    email: 'hmusk7@gmail.com',
    password: '123123!',
});

await student1.save();

const firstArticle = await Blog.findOne({});
console.log(firstArticle);*/

/* create() 은 인스턴스 생성 및 데이터베이스에 저장을 한번에 수행해줌
const student1 = await User.create({
    email: 'abcabc',
    password: '134141335!#!4',
});

// findone 할 필요 없이 console.log 하면 바로 _id와 함께 문서를 반환함
console.log(student1);*/

/* Update 도 매우 간단함. 오브젝트를 불러오고 그냥 수정한 후 Save 하면 됨.
student1.email = "asdfdf";
await student1.save();
console.log(student1);*/

/*
// 다음과 같이 원하는 Document를 검색 가능
const student = await User.findById("664c67b273fc9683102e879f").exec();
console.log(student);

// 원하는 정보만 검색할 수도 있음: email, password
const student2 = await User.findById("664c67b273fc9683102e879f", "email password").exec();
console.log(student2);*/

/*
// deleteOne 또는 deleteMany 사용 가능 (mongosh 에서 쓰던 것처럼)
const student3 = await User.deleteMany({ email: ["abcabc", "asdfdf"]});
console.log(student3);*/
/*
const student = await User.create({
    email: "test@test.com",
    password: "test123!",
});*/

/*
// exists() 는 null 또는 ObjectId (가장 최상위 Document 하나만) 를 반환
const isExist = await User.exists({ email: "test@test.com"})
console.log(isExist);

// 찾아서 전체 반환
const studentFind = await User.find({ email: "test@test.com"});
console.log(studentFind);

// 찾아서 전체 반환
const studentWhere = await User.where("email").equals("test@test.com");
console.log(studentWhere);

// where 에 select 를 추가해서 projection 을 설정할 수 있음
const studentWhere2 = await User.where("email").equals("test@test.com").select("_id email");
console.log(studentWhere2);*/

/* populate: 현재 Documents 에서 참조한 다른 컬렉션의 Document를 자동으로 조회하여
             참조한 필드에 그 Document 를 불러옴.

// Student 스키마
const StudentSchema = new Schema({
    name: String,
    height: Number,
});

// Class 스키마
const ClassSchema = new Schema({
    classNo: Number,
    relatedIds: [{ type: Schema.Types.ObjectId, ref: 'Student' }],
});

// populate 로 classDoc 객체를 가져오기
Class.findById(Class.classNo).populate('relatedIds').exec((err, classDoc) => {
    if (err) return console.error(err);
    
    // relatedIds에서 첫 번째 student ID 가져오기
    const studentId = classDoc.relatedIds[0];
});

왜냐하면, classDoc 은 populate 로 가져오면 relatedIds 필드에
ObjectId 대신 Student 의 문서가 채워지기 때문.

// scoreDoc.relatedIds 는 배열로 저장된 객체임.
{
    "_id": "classDocumentId",
    "classNo": 3,
    "relatedIds": [
        {
            "_id": "student1Id",
            "name": "John",
            "height": 170
        },
        {
            "_id": "student2Id",
            "name": "Jane",
            "height": 160
        }
    ]
}

그 안에서 또 특정 studentId 를 가진 문서를 찾으려면 배열의 함수를 이용해야함.
const studentDoc = scoreDoc.relatedIds.find(student => student._id.toString() === studentId.toString());

*/